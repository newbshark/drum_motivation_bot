import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv
from read_channel import find_messages_by_keyword  # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))  # –ø—Ä–∏–º–µ—Ä: -1001234567890

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–∞–º—è—Ç–∏
user_keywords = {}
user_results = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–ª–æ–≤–æ-–º–æ—Ç–∏–≤–∞—Ü–∏—é, –∏ —è –Ω–∞–π–¥—É —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Å–ª–æ–≤–æ-–ø–∞—Ä–æ–ª—å
async def handle_keyword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyword = update.message.text.strip().lower()
    user_keywords[user_id] = keyword

    await update.message.reply_text(f"üîç –ò—â—É —É—Ä–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º: ¬´{keyword}¬ª...")

    # –ò—â–µ–º —É—Ä–æ–∫–∏
    messages = await find_messages_by_keyword(keyword)

    if not messages:
        await update.message.reply_text("üòî –£—Ä–æ–∫–æ–≤ —Å —Ç–∞–∫–∏–º —Å–ª–æ–≤–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_results[user_id] = messages

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for i, msg in enumerate(messages):
        label = msg["text"][:30] + "..." if msg["text"] else "–£—Ä–æ–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        keyboard.append([InlineKeyboardButton(f"{i + 1}. {label}", callback_data=str(i))])

    await update.message.reply_text(
        "üéì –ù–∞–π–¥–µ–Ω—ã —É—Ä–æ–∫–∏. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in user_results:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.")
        return

    idx = int(query.data)
    messages = user_results[user_id]

    if idx >= len(messages):
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    message_id = messages[idx]["message_id"]

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    await context.bot.forward_message(
        chat_id=user_id,
        from_chat_id=CHANNEL_ID,
        message_id=message_id,
    )

    await query.edit_message_text("üì¶ –£—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å–ª–æ–≤–æ –∏ –ø–æ–ª—É—á–∏ —É—Ä–æ–∫–∏ üîë")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_keyword))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
